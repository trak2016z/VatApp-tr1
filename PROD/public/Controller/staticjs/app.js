angular.module("VatApp",["ngRoute"]),angular.module("VatApp").config(["$routeProvider","$locationProvider",function(e,t){t.html5Mode({enabled:!0,requireBase:!1}),e.when("/",{controller:"PostsCtrl",templateUrl:"pages/posty.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"pages/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"pages/login.html"}).when("/files",{controller:"FilesCtrl",templateUrl:"pages/files.html"}).when("/users",{controller:"UsersCtrl",templateUrl:"pages/users.html"})}]),angular.module("VatApp").controller("ApplicationCtrl",["$scope","UserSvc","$window",function(e,t,n){n.localStorage.getItem("Token_jwt")&&t.getLogUser(n.localStorage.getItem("Token_jwt")).then(function(t){e.currentUser=t.data}),e.$on("login",function(t,n){e.currentUser=n}),e.logOut=function(){t.logOut(),e.currentUser=null}}]),angular.module("VatApp").controller("FilesCtrl",["$scope","FilesSvc","$location","$window",function(e,t,n,o){o.localStorage.getItem("Token_jwt")||n.path("/login")}]),angular.module("VatApp").controller("LoginCtrl",["$scope","UserSvc","$location","$window",function(e,t,n,o){o.localStorage.getItem("Token_jwt")&&(e.msgWar=!0),e.login=function(o,r){t.login(o,r).then(function(t){e.msgErrLog=null,e.$emit("login",t.data),n.path("/")}),e.msgErrLog=!0}}]),angular.module("VatApp").controller("PostsCtrl",["$scope","PostsSvc",function(e,t){t.fetch().success(function(t){e.posts=t}).error(function(e){}),e.addPost=function(){e.currentUser&&e.postTresc&&t.create({tresc:e.postTresc}).success(function(t){e.posts.unshift(t),e.postTresc=null})}}]),angular.module("VatApp").controller("RegisterCtrl",["$scope","UserSvc","$location",function(e,t,n){e.createUser=function(o,r,s){r!==s?e.msgErrPass=!0:(e.msgErrPass=null,t.createUser(o,r,s).then(function(t){e.$emit("login",t.data),n.path("/")}))}}]),angular.module("VatApp").controller("UsersCtrl",["$scope","UserSvc","$window","$location",function(e,t,n,o){n.localStorage.getItem("Token_jwt")||o.path("/login"),t.getAllUsers().success(function(t){e.users=t}).error(function(e){}),e.deleteUser=function(n){e.currentUser.name===n?t.deleteUser(n).then(function(n){n.msg?(console.log(n.data),e.msgErrDelUser=n.data):(t.logOut(),e.currentUser=null,console.log(e.currentUser),location.reload())}):t.deleteUser(n).then(function(e){console.log(e),o.path("/users/")})}}]),angular.module("VatApp").service("FilesSvc",["$http","$window",function(e,t){}]),angular.module("VatApp").service("PostsSvc",["$http",function(e){this.fetch=function(){return e.get("/api/posts")},this.create=function(t){return e.post("/api/posts",t)}}]),angular.module("VatApp").service("UserSvc",["$http","$window",function(e,t){var n=this;n.getUser=function(){return e.get("/api/users")},n.getAllUsers=function(){return e.get("/api/users/all")},n.setAuthHeaders=function(t){e.defaults.headers.common["X-Auth"]=t},n.getLogUser=function(e){return n.setAuthHeaders(e),n.getUser()},n.login=function(o,r){return e.post("/api/sessions",{name:o,pass:r}).then(function(e){return n.setAuthHeaders(t.localStorage.Token_jwt=e.data),n.getUser()})},n.createUser=function(t,o){return e.post("/api/users",{name:t,pass:o}).then(function(e,r,s){return r?s(r):n.login(t,o)})},n.deleteUser=function(t){return e.post("/api/users/delete",{name:t}).then(function(e){return e.data})},n.logOut=function(){t.localStorage.removeItem("Token_jwt")}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsInJvdXRlcy5qcyIsIkN0cmwvQXBwbGljYXRpb25DdHJsLmpzIiwiQ3RybC9maWxlcy5jdHJsLmpzIiwiQ3RybC9sb2dpbi5jdHJsLmpzIiwiQ3RybC9wb3N0cy5jdHJsLmpzIiwiQ3RybC9yZWdpc3Rlci5jdHJsLmpzIiwiQ3RybC91c2Vycy5jdHJsLmpzIiwiU3ZjL2ZpbGVzLnN2Yy5qcyIsIlN2Yy9wb3N0cy5zdmMuanMiLCJTdmMvdXNlci5zdmMuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJodG1sNU1vZGUiLCJlbmFibGVkIiwicmVxdWlyZUJhc2UiLCJ3aGVuIiwiY29udHJvbGxlciIsInRlbXBsYXRlVXJsIiwiJHNjb3BlIiwiVXNlclN2YyIsIiR3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiZ2V0TG9nVXNlciIsInRoZW4iLCJyZXNwb25zZSIsImN1cnJlbnRVc2VyIiwiZGF0YSIsIiRvbiIsIl8iLCJ1c2VybmFtZSIsImxvZ091dCIsIkZpbGVzU3ZjIiwiJGxvY2F0aW9uIiwicGF0aCIsIm1zZ1dhciIsImxvZ2luIiwicGFzc3dvcmQiLCJtc2dFcnJMb2ciLCIkZW1pdCIsIlBvc3RzU3ZjIiwiZmV0Y2giLCJzdWNjZXNzIiwicG9zdHMiLCJlcnJvciIsImVyciIsImFkZFBvc3QiLCJwb3N0VHJlc2MiLCJjcmVhdGUiLCJ0cmVzYyIsInBvc3QiLCJ1bnNoaWZ0IiwiY3JlYXRlVXNlciIsInBhc3N3b3JkMiIsIm1zZ0VyclBhc3MiLCJnZXRBbGxVc2VycyIsInVzZXJzIiwiZGVsZXRlVXNlciIsIm5hbWUiLCJyZXMiLCJtc2ciLCJjb25zb2xlIiwibG9nIiwibXNnRXJyRGVsVXNlciIsImxvY2F0aW9uIiwicmVsb2FkIiwic2VydmljZSIsIiRodHRwIiwidGhpcyIsImdldCIsInN2YyIsImdldFVzZXIiLCJzZXRBdXRoSGVhZGVycyIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwibG9jYWxfdG9rZW4iLCJwYXNzIiwidmFsIiwibmV4dCIsInJlbW92ZUl0ZW0iXSwibWFwcGluZ3MiOiJBQUNBQSxRQUFBQyxPQUFBLFVBQ0EsWUNHQUQsUUFBQUMsT0FBQSxVQUNBQyxRQUFBLGlCQUFBLG9CQUFBLFNBQUFDLEVBQUFDLEdBQ0FBLEVBQUFDLFdBQ0FDLFNBQUEsRUFDQUMsYUFBQSxJQUVBSixFQUNBSyxLQUFBLEtBQUFDLFdBQUEsWUFBQUMsWUFBQSxxQkFDQUYsS0FBQSxhQUFBQyxXQUFBLGVBQUFDLFlBQUEsd0JBQ0FGLEtBQUEsVUFBQUMsV0FBQSxZQUFBQyxZQUFBLHFCQUNBRixLQUFBLFVBQUFDLFdBQUEsWUFBQUMsWUFBQSxxQkFDQUYsS0FBQSxVQUFBQyxXQUFBLFlBQUFDLFlBQUEsd0JDVEFWLFFBQUFDLE9BQUEsVUFDQVEsV0FBQSxtQkFBQSxTQUFBLFVBQUEsVUFBQSxTQUFBRSxFQUFBQyxFQUFBQyxHQUNBQSxFQUFBQyxhQUFBQyxRQUFBLGNBQ0FILEVBQUFJLFdBQUFILEVBQUFDLGFBQUFDLFFBQUEsY0FDQUUsS0FBQSxTQUFBQyxHQUNBUCxFQUFBUSxZQUFBRCxFQUFBRSxPQUdBVCxFQUFBVSxJQUFBLFFBQUEsU0FBQUMsRUFBQUMsR0FDQVosRUFBQVEsWUFBQUksSUFFQVosRUFBQWEsT0FBQSxXQUNBWixFQUFBWSxTQUNBYixFQUFBUSxZQUFBLFNDbEJBbkIsUUFBQUMsT0FBQSxVQUNBUSxXQUFBLGFBQUEsU0FBQSxXQUFBLFlBQUEsVUFBQSxTQUFBRSxFQUFBYyxFQUFBQyxFQUFBYixHQUNBQSxFQUFBQyxhQUFBQyxRQUFBLGNBQ0FXLEVBQUFDLEtBQUEsYUNGQTNCLFFBQUFDLE9BQUEsVUFDQVEsV0FBQSxhQUFBLFNBQUEsVUFBQSxZQUFBLFVBQUEsU0FBQUUsRUFBQUMsRUFBQWMsRUFBQWIsR0FDQUEsRUFBQUMsYUFBQUMsUUFBQSxlQUNBSixFQUFBaUIsUUFBQSxHQUVBakIsRUFBQWtCLE1BQUEsU0FBQU4sRUFBQU8sR0FDQWxCLEVBQUFpQixNQUFBTixFQUFBTyxHQUNBYixLQUFBLFNBQUFDLEdBQ0FQLEVBQUFvQixVQUFBLEtBQ0FwQixFQUFBcUIsTUFBQSxRQUFBZCxFQUFBRSxNQUNBTSxFQUFBQyxLQUFBLE9BRUFoQixFQUFBb0IsV0FBQSxNQ1pBL0IsUUFBQUMsT0FBQSxVQUNBUSxXQUFBLGFBQUEsU0FBQSxXQUFBLFNBQUFFLEVBQUFzQixHQUNBQSxFQUFBQyxRQUNBQyxRQUFBLFNBQUFDLEdBQ0F6QixFQUFBeUIsTUFBQUEsSUFFQUMsTUFBQSxTQUFBQyxNQUlBM0IsRUFBQTRCLFFBQUEsV0FDQTVCLEVBQUFRLGFBQ0FSLEVBQUE2QixXQUVBUCxFQUFBUSxRQUNBQyxNQUFBL0IsRUFBQTZCLFlBQ0FMLFFBQUEsU0FBQVEsR0FDQWhDLEVBQUF5QixNQUFBUSxRQUFBRCxHQUNBaEMsRUFBQTZCLFVBQUEsV0NyQkF4QyxRQUFBQyxPQUFBLFVBQ0FRLFdBQUEsZ0JBQUEsU0FBQSxVQUFBLFlBQUEsU0FBQUUsRUFBQUMsRUFBQWMsR0FDQWYsRUFBQWtDLFdBQUEsU0FBQXRCLEVBQUFPLEVBQUFnQixHQUNBaEIsSUFBQWdCLEVBQ0FuQyxFQUFBb0MsWUFBQSxHQUVBcEMsRUFBQW9DLFdBQUEsS0FDQW5DLEVBQUFpQyxXQUFBdEIsRUFBQU8sRUFBQWdCLEdBQ0E3QixLQUFBLFNBQUFDLEdBQ0FQLEVBQUFxQixNQUFBLFFBQUFkLEVBQUFFLE1BQ0FNLEVBQUFDLEtBQUEsWUNWQTNCLFFBQUFDLE9BQUEsVUFDQVEsV0FBQSxhQUFBLFNBQUEsVUFBQSxVQUFBLFlBQUEsU0FBQUUsRUFBQUMsRUFBQUMsRUFBQWEsR0FDQWIsRUFBQUMsYUFBQUMsUUFBQSxjQUNBVyxFQUFBQyxLQUFBLFVBRUFmLEVBQUFvQyxjQUNBYixRQUFBLFNBQUFjLEdBQ0F0QyxFQUFBc0MsTUFBQUEsSUFFQVosTUFBQSxTQUFBQyxNQUdBM0IsRUFBQXVDLFdBQUEsU0FBQUMsR0FFQXhDLEVBQUFRLFlBQUFnQyxPQUFBQSxFQUNBdkMsRUFBQXNDLFdBQUFDLEdBQUFsQyxLQUFBLFNBQUFtQyxHQUNBQSxFQUFBQyxLQUNBQyxRQUFBQyxJQUFBSCxFQUFBaEMsTUFDQVQsRUFBQTZDLGNBQUFKLEVBQUFoQyxPQUVBUixFQUFBWSxTQUNBYixFQUFBUSxZQUFBLEtBQ0FtQyxRQUFBQyxJQUFBNUMsRUFBQVEsYUFDQXNDLFNBQUFDLFlBSUE5QyxFQUFBc0MsV0FBQUMsR0FBQWxDLEtBQUEsU0FBQW1DLEdBQ0FFLFFBQUFDLElBQUFILEdBQ0ExQixFQUFBQyxLQUFBLGlCQzdCQTNCLFFBQUFDLE9BQUEsVUFDQTBELFFBQUEsWUFBQSxRQUFBLFVBQUEsU0FBQUMsRUFBQS9DLE9DRUFiLFFBQUFDLE9BQUEsVUFDQTBELFFBQUEsWUFBQSxRQUFBLFNBQUFDLEdBQ0FDLEtBQUEzQixNQUFBLFdBQ0EsTUFBQTBCLEdBQUFFLElBQUEsZUFFQUQsS0FBQXBCLE9BQUEsU0FBQUUsR0FDQSxNQUFBaUIsR0FBQWpCLEtBQUEsYUFBQUEsT0NMQTNDLFFBQUFDLE9BQUEsVUFDQTBELFFBQUEsV0FBQSxRQUFBLFVBQUEsU0FBQUMsRUFBQS9DLEdBQ0EsR0FBQWtELEdBQUFGLElBQ0FFLEdBQUFDLFFBQUEsV0FDQSxNQUFBSixHQUFBRSxJQUFBLGVBRUFDLEVBQUFmLFlBQUEsV0FDQSxNQUFBWSxHQUFBRSxJQUFBLG1CQUVBQyxFQUFBRSxlQUFBLFNBQUFDLEdBRUFOLEVBQUFPLFNBQUFDLFFBQUFDLE9BQUEsVUFBQUgsR0FFQUgsRUFBQS9DLFdBQUEsU0FBQXNELEdBRUEsTUFEQVAsR0FBQUUsZUFBQUssR0FDQVAsRUFBQUMsV0FFQUQsRUFBQWxDLE1BQUEsU0FBQU4sRUFBQU8sR0FDQSxNQUFBOEIsR0FBQWpCLEtBQUEsaUJBQ0FRLEtBQUE1QixFQUFBZ0QsS0FBQXpDLElBQ0FiLEtBQUEsU0FBQXVELEdBRUEsTUFEQVQsR0FBQUUsZUFBQXBELEVBQUFDLGFBQUEsVUFBQTBELEVBQUFwRCxNQUNBMkMsRUFBQUMsYUFHQUQsRUFBQWxCLFdBQUEsU0FBQXRCLEVBQUFPLEdBQ0EsTUFBQThCLEdBQUFqQixLQUFBLGNBQ0FRLEtBQUE1QixFQUFBZ0QsS0FBQXpDLElBQ0FiLEtBQUEsU0FBQW1DLEVBQUFkLEVBQUFtQyxHQUNBLE1BQUFuQyxHQUNBbUMsRUFBQW5DLEdBRUF5QixFQUFBbEMsTUFBQU4sRUFBQU8sTUFJQWlDLEVBQUFiLFdBQUEsU0FBQUMsR0FDQSxNQUFBUyxHQUFBakIsS0FBQSxxQkFDQVEsS0FBQUEsSUFDQWxDLEtBQUEsU0FBQW1DLEdBQ0EsTUFBQUEsR0FBQWhDLFFBR0EyQyxFQUFBdkMsT0FBQSxXQUNBWCxFQUFBQyxhQUFBNEQsV0FBQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmFuZ3VsYXIubW9kdWxlKCdWYXRBcHAnLCBbXG4gICAgJ25nUm91dGUnXG5dKTsiLCIvKlxyXG4gKiBBdXRob3I6IFRodWx1IFNvZnR3YXJlXHJcbiAqICAgICAgICAgICBcclxuICovXHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnVmF0QXBwJylcclxuICAgICAgICAuY29uZmlnKGZ1bmN0aW9uICgkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlQmFzZTogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICRyb3V0ZVByb3ZpZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgLndoZW4oJy8nLCB7Y29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsIHRlbXBsYXRlVXJsOiAncGFnZXMvcG9zdHkuaHRtbCd9KVxyXG4gICAgICAgICAgICAgICAgICAgIC53aGVuKCcvcmVnaXN0ZXInLCB7Y29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsIHRlbXBsYXRlVXJsOiAncGFnZXMvcmVnaXN0ZXIuaHRtbCd9KVxyXG4gICAgICAgICAgICAgICAgICAgIC53aGVuKCcvbG9naW4nLCB7Y29udHJvbGxlcjogJ0xvZ2luQ3RybCcsIHRlbXBsYXRlVXJsOiAncGFnZXMvbG9naW4uaHRtbCd9KVxyXG4gICAgICAgICAgICAgICAgICAgIC53aGVuKCcvZmlsZXMnLCB7Y29udHJvbGxlcjogJ0ZpbGVzQ3RybCcsIHRlbXBsYXRlVXJsOiAncGFnZXMvZmlsZXMuaHRtbCd9KVxyXG4gICAgICAgICAgICAgICAgICAgIC53aGVuKCcvdXNlcnMnLCB7Y29udHJvbGxlcjogJ1VzZXJzQ3RybCcsIHRlbXBsYXRlVXJsOiAncGFnZXMvdXNlcnMuaHRtbCd9KVxyXG4gICAgICAgICAgICAgICAgICAgIDtcclxuICAgICAgICB9KTtcclxuIiwiLyogXG4gKiBUbyBjaGFuZ2UgdGhpcyBsaWNlbnNlIGhlYWRlciwgY2hvb3NlIExpY2Vuc2UgSGVhZGVycyBpbiBQcm9qZWN0IFByb3BlcnRpZXMuXG4gKiBUbyBjaGFuZ2UgdGhpcyB0ZW1wbGF0ZSBmaWxlLCBjaG9vc2UgVG9vbHMgfCBUZW1wbGF0ZXNcbiAqIGFuZCBvcGVuIHRoZSB0ZW1wbGF0ZSBpbiB0aGUgZWRpdG9yLlxuICovXG5cblxuYW5ndWxhci5tb2R1bGUoJ1ZhdEFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjLCAkd2luZG93KSB7XG4gICAgICAgICAgICBpZiAoJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnVG9rZW5fand0JykpIHtcbiAgICAgICAgICAgICAgICBVc2VyU3ZjLmdldExvZ1VzZXIoJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnVG9rZW5fand0JykpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkc2NvcGUuJG9uKCdsb2dpbicsIGZ1bmN0aW9uIChfLCB1c2VybmFtZSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IHVzZXJuYW1lO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkc2NvcGUubG9nT3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIFVzZXJTdmMubG9nT3V0KCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pOyIsIlxuXG5hbmd1bGFyLm1vZHVsZSgnVmF0QXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0ZpbGVzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIEZpbGVzU3ZjLCAkbG9jYXRpb24sICR3aW5kb3cpIHtcbiAgICAgICAgICAgIGlmICghJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnVG9rZW5fand0JykpIHtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pOyIsIi8qIFxuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdWYXRBcHAnKVxuICAgICAgICAuY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2YywgJGxvY2F0aW9uLCAkd2luZG93KSB7XG4gICAgICAgICAgICBpZiAoJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnVG9rZW5fand0JykpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubXNnV2FyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgICBVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tc2dFcnJMb2cgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1zZ0VyckxvZyA9IHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTsiLCIvKiBcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnVmF0QXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFBvc3RzU3ZjKSB7XG4gICAgICAgICAgICBQb3N0c1N2Yy5mZXRjaCgpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RzID0gcG9zdHM7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY3VycmVudFVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5wb3N0VHJlc2MpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgUG9zdHNTdmMuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmVzYzogJHNjb3BlLnBvc3RUcmVzY1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAocG9zdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wb3N0VHJlc2MgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdWYXRBcHAnKVxuICAgICAgICAuY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2YywgJGxvY2F0aW9uKSB7XG4gICAgICAgICAgICAkc2NvcGUuY3JlYXRlVXNlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQsIHBhc3N3b3JkMikge1xuICAgICAgICAgICAgICAgIGlmIChwYXNzd29yZCAhPT0gcGFzc3dvcmQyKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tc2dFcnJQYXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubXNnRXJyUGFzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIFVzZXJTdmMuY3JlYXRlVXNlcih1c2VybmFtZSwgcGFzc3dvcmQsIHBhc3N3b3JkMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBcblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ1ZhdEFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdVc2Vyc0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjLCAkd2luZG93LCAkbG9jYXRpb24pIHtcbiAgICAgICAgICAgIGlmICghJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnVG9rZW5fand0JykpIHtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBVc2VyU3ZjLmdldEFsbFVzZXJzKClcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHVzZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXNlcnMgPSB1c2VycztcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChlcnIpIHtcblxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVVc2VyID0gZnVuY3Rpb24gKG5hbWUpIHtcblxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY3VycmVudFVzZXIubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBVc2VyU3ZjLmRlbGV0ZVVzZXIobmFtZSkudGhlbihmdW5jdGlvbiAocmVzKSB7ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzLm1zZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubXNnRXJyRGVsVXNlciA9IHJlcy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVc2VyU3ZjLmxvZ091dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICRzY29wZS5jdXJyZW50VXNlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIFVzZXJTdmMuZGVsZXRlVXNlcihuYW1lKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3VzZXJzLycpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ1ZhdEFwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCdGaWxlc1N2YycsIGZ1bmN0aW9uICgkaHR0cCwgJHdpbmRvdykge1xuICAgICAgICAgICAgXG59KTsiLCIvKiBcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnVmF0QXBwJylcbiAgICAgICAgLnNlcnZpY2UoJ1Bvc3RzU3ZjJywgZnVuY3Rpb24gKCRodHRwKSB7XG4gICAgICAgICAgICB0aGlzLmZldGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMnLCBwb3N0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG5cbiIsIi8qIFxuICovXG5cblxuYW5ndWxhci5tb2R1bGUoJ1ZhdEFwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24gKCRodHRwLCAkd2luZG93KSB7XG4gICAgICAgICAgICB2YXIgc3ZjID0gdGhpcztcbiAgICAgICAgICAgIHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdmMuZ2V0QWxsVXNlcnMgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMvYWxsJyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3ZjLnNldEF1dGhIZWFkZXJzID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgICAgICAgICAgLy8gZG/FgsSFY3phbmllIG5hZ8WCw7N3a2EgZG8gxbzEhWRhxYRcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB0b2tlbjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdmMuZ2V0TG9nVXNlciA9IGZ1bmN0aW9uIChsb2NhbF90b2tlbikge1xuICAgICAgICAgICAgICAgIHN2Yy5zZXRBdXRoSGVhZGVycyhsb2NhbF90b2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3ZjLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB1c2VybmFtZSwgcGFzczogcGFzc3dvcmRcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ZjLnNldEF1dGhIZWFkZXJzKCR3aW5kb3cubG9jYWxTdG9yYWdlWydUb2tlbl9qd3QnXSA9IHZhbC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3ZjLmNyZWF0ZVVzZXIgPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHVzZXJuYW1lLCBwYXNzOiBwYXNzd29yZFxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcywgZXJyLCBuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdmMuZGVsZXRlVXNlciA9IGZ1bmN0aW9uIChuYW1lKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy9kZWxldGUnLCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlcyl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuZGF0YTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdmMubG9nT3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ1Rva2VuX2p3dCcpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICB9KTsiXX0=
